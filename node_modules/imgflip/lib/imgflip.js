'use strict'

Object.defineProperty(exports, '__esModule', {
  value: true
})
exports.default = void 0

var _stream = _interopRequireDefault(require('stream'))

var _fs = _interopRequireDefault(require('fs'))

var _util = require('util')

var _got = _interopRequireDefault(require('got'))

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj }
}

const pipeline = (0, _util.promisify)(_stream.default.pipeline)

class Imgflip {
  constructor({ username, password }) {
    this.username = username
    this.password = password
  } // https://api.imgflip.com

  async request(path, options) {
    const response = await (0, _got.default)(path, {
      prefixUrl: `https://api.imgflip.com`,
      ...options
    }).json()

    if (response.success === true) {
      return response.data
    }

    throw new Error(response.error_message)
  }

  async memes() {
    return (await this.request(`get_memes`)).memes
  }

  async meme(id, { captions, font, maxFontSize, path }) {
    const searchParams = {
      template_id: id,
      username: this.username,
      password: this.password,
      ...Object.assign(
        ...captions.map((caption, i) => ({
          [`boxes[${i}][text]`]: caption
        }))
      )
    }

    if (font != null) {
      searchParams.font = font
    }

    if (maxFontSize != null) {
      searchParams.max_font_size = maxFontSize
    }

    const { url } = await this.request(`caption_image`, {
      method: `POST`,
      searchParams
    })

    if (path != null) {
      await pipeline(
        _got.default.stream(url),
        _fs.default.createWriteStream(path)
      )
    }

    return url
  }
}

var _default = Imgflip
exports.default = _default
